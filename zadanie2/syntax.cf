Progr.      Program         ::= [Decl] "->" Exp;
DFun.       Decl            ::= "FN" Ident "(" [Ident] ")" "=" Exp ;
ECall.      Exp15           ::= "call" Exp1 "(" [Exp] ")";
ELet.       Exp3            ::= "let" Binding "in" Exp3 ;
EIf.        Exp6            ::= "if" BExp "then" Exp1 "else" Exp2;
ELambda.    Exp7            ::= "lambda" Ident "=>" Exp;
CList.      Exp8            ::= "[]" ;
EHead.      Exp8            ::= "head"  Exp7 ;
ETail.      Exp8            ::= "tail"  Exp7 ;
EAppend.    Exp9            ::= Exp9 ":" Exp10;
EAdd.       Exp12           ::= Exp12 "+" Exp13 ;
ESub.       Exp12           ::= Exp12 "-" Exp13 ;
EMul.       Exp13           ::= Exp13 "*" Exp14 ;
EDiv.       Exp13           ::= Exp13 "/" Exp14 ;
EVar.       Exp16           ::= Ident ;
EInt.       Exp16           ::= Integer ;

BEmpty.     BExp            ::= "empty" Exp ;
CTrue.      BExp            ::= "T" ;
CFalse.     BExp            ::= "F" ;
BComp.      BExp            ::= BExp1 "==" BExp2 ;
EComp2.     BExp            ::= Exp9 "==" Exp10 ;
EComp.      BExp            ::= Exp10 "<" Exp11 ;

Bind.       Binding         ::= Ident "=" Exp14 ;


coercions   BExp 6;
coercions   Exp 17 ;
separator   Exp ",";
separator   Decl "," ;
separator   Binding "," ;
separator   Ident "," ;

comment     "--" ;

-- DType.      Decl            ::= "data" Ident "=" [Cons] ;
-- terminator  Function "" ;
-- separator Cons "|" ;
-- DCons.      Cons            ::= Ident Ident ;
-- TCons.      Type            ::= "<" Ident ">"
-- Efunkpar.   Exp16           ::= Exp16 "(" Exp ")" ;
-- TInt.       Type            ::= "I" ;
-- TBool.      Type            ::= "B" ;
-- EMath.      Exp             ::= "case" Exp "of" [Pattern] ;
-- Patter.     Pattern         ::= Exp "=" Exp2 ;
-- separator   Pattern "," ;
