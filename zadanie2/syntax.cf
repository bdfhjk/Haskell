Progr.      Program         ::= [Decl] "->" Exp;
DType.      Decl            ::= "data" Ident "=" [Cons] ;
DFun.       Decl            ::= "FN" Ident "(" [Ident] ")" "=" Exp ;
DCons.      Cons            ::= Ident Ident ;
EAdd.       Exp             ::= Exp "+" Exp1 ;
ESub.       Exp             ::= Exp "-" Exp1 ;
EMul.       Exp1            ::= Exp1 "*" Exp2 ;
EVar.       Exp4            ::= Ident ;
EDiv.       Exp1            ::= Exp1 "/" Exp2 ;
EComp.      Exp2            ::= Exp2 "<" Exp3 ;
ECall.      Exp2            ::= "call" Ident "(" [Exp] ")";
ECall2.     Exp2            ::= "call" Exp1 "(" [Exp] ")";
Bind.       Binding         ::= Ident "=" Exp ;
ELet.       Exp4            ::= "let" Binding "in" Exp ;
ELambda.    Exp5            ::= "lambda" Ident "=>" Exp;
EInt.       Exp3            ::= Integer ;
-- Efunkpar.   Exp16           ::= Exp16 "(" Exp ")" ;
-- TInt.       Type            ::= "I" ;
-- TBool.      Type            ::= "B" ;
-- TList.      Type            ::= "L" ;
-- Patter.     Pattern         ::= Type "=" Exp ;
-- EMath.      Exp             ::= "case" Exp "of" [Pattern] ;
coercions   Exp 16 ;
separator   Exp ",";
-- separator   Pattern "," ;
-- terminator  Function "" ;
separator   Decl "," ;
separator   Binding "," ;
separator Ident "," ;
separator Cons "|" ;
comment "--" ;
